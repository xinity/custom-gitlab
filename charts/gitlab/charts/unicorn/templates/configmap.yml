{{- if .Values.enabled -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "fullname" . }}
  namespace: {{ $.Release.Namespace }}
  labels:
{{ include "gitlab.standardLabels" . | indent 4 }}
data:
  installation_type: |
    gitlab-helm-chart
  database.yml.erb: |
    production:
      adapter: postgresql
      encoding: unicode
      database: {{ template "gitlab.psql.database" . }}
      pool: 10
      username: {{ template "gitlab.psql.username" . }}
      password: <%= File.read("/etc/gitlab/postgres/psql-password") %>
      host: {{ template "gitlab.psql.host" . }}
      port: {{ template "gitlab.psql.port" . }}
      # load_balancing:
      #   hosts:
      #     - host1.example.com
      #     - host2.example.com
  smtp_settings.rb: |
{{ include "gitlab.smtp_settings" . | indent 4 }}
  resque.yml.erb: |
    production:
      # Redis (single instance)
      url: redis://:<%= File.read("/etc/gitlab/redis/password") %>@{{ template "gitlab.redis.host" . }}:{{ template "gitlab.redis.port" . }}
  unicorn.rb: |
    worker_processes {{ .Values.workerProcesses }}
    working_directory "/srv/gitlab"
    listen "0.0.0.0:{{ .Values.service.internalPort }}", :tcp_nopush => true
    timeout {{ .Values.workerTimeout }}
    pid "/home/git/unicorn.pid"
    preload_app true

    before_fork do |server, worker|
      old_pid = "#{server.config[:pid]}.oldbin"
      if old_pid != server.pid
        begin
          sig = (worker.nr + 1) >= server.worker_processes ? :QUIT : :TTOU
          Process.kill(sig, File.read(old_pid).to_i)
        rescue Errno::ENOENT, Errno::ESRCH
        end
      end

      ActiveRecord::Base.connection.disconnect! if defined?(ActiveRecord::Base)
    end

    after_fork do |server, worker|
      ActiveRecord::Base.establish_connection if defined?(ActiveRecord::Base)
      defined?(::Prometheus::Client.reinitialize_on_pid_change) && Prometheus::Client.reinitialize_on_pid_change
    end

    ENV['GITLAB_UNICORN_MEMORY_MIN'] = (400 * 1 << 20).to_s
    ENV['GITLAB_UNICORN_MEMORY_MAX'] = (650 * 1 << 20).to_s

  gitlab.yml.erb: |
    production: &base
      gitlab:
        host: {{ template "gitlab.gitlab.hostname" . }}
        https: {{ hasPrefix "https://" (include "gitlab.gitlab.url" .) }}
        {{- with .Values.global.hosts.ssh }}
        ssh_host: {{ . | quote }}
        {{- end }}
        {{- with .Values.global.appConfig }}
        usage_ping_enabled: {{ eq .enableUsagePing true }}
        default_can_create_group: {{ eq .defaultCanCreateGroup true }}
        username_changing_enabled: {{ eq .usernameChangingEnabled true }}
        issue_closing_pattern: {{ .issueClosingPattern | quote }}
        default_theme: {{ .defaultTheme }}
        default_projects_features:
          issues: {{ eq .defaultProjectsFeatures.issues true }}
          merge_requests: {{ eq .defaultProjectsFeatures.mergeRequests true }}
          wiki: {{ eq .defaultProjectsFeatures.wiki true }}
          snippets: {{ eq .defaultProjectsFeatures.snippets true }}
          builds: {{ eq .defaultProjectsFeatures.builds true }}
          container_registry: true
        webhook_timeout: {{ .webhookTimeout }}
        {{- end }}
        trusted_proxies:
        {{- if .Values.trusted_proxies }}
{{ toYaml .Values.trusted_proxies | indent 10 }}
        {{- end }}
        time_zone: {{ .Values.global.time_zone | quote }}
        email_from: {{ template "gitlab.email.from" . }}
        email_display_name: {{ .Values.global.email.display_name | quote }}
        email_reply_to: {{ template "gitlab.email.reply_to" . }}
        email_subject_suffix: {{ .Values.global.email.subject_suffix | quote }}
      {{- with .Values.global.appConfig }}
      {{- if eq .incomingEmail.enabled true }}
      incoming_email:
        enabled: {{ eq .incomingEmail.enabled true }}
        address: {{ .incomingEmail.address | quote }}
      {{- end }}
      gravatar:
        plain_url: {{ .gravatar.plainUrl }}
        ssl_url: {{ .gravatar.sslUrl }}
      extra:
        google_analytics_id: {{ .extra.googleAnalyticsId | quote }}
        piwik_url: {{ .extra.piwikUrl | quote }}
        piwik_site_id: {{ .extra.piwikSiteId | quote }}
      {{- end }}
      artifacts:
        enabled: {{ eq .Values.global.appConfig.artifacts.enabled true }}
        object_store:
          enabled: true
          remote_directory: {{ .Values.global.appConfig.artifacts.bucket }}
          direct_upload: true
          background_upload: false
          proxy_download: {{ eq .Values.global.appConfig.artifacts.proxy_download true }}
          {{- if .Values.global.minio.enabled }}
          connection:
            provider: AWS
            region: us-east-1
            aws_access_key_id: "<%= File.read('/etc/gitlab/minio/accesskey') %>"
            aws_secret_access_key: "<%= File.read('/etc/gitlab/minio/secretkey') %>"
            host: {{ template "gitlab.minio.hostname" . }}
            endpoint: {{ template "gitlab.minio.endpoint" . }}
            path_style: true
          {{- else if .Values.global.appConfig.artifacts.connection }}
          connection: <%= YAML.load_file("/etc/gitlab/objectstorage/artifacts").to_json() %>
          {{- end }}
      lfs:
        enabled: {{ eq .Values.global.appConfig.lfs.enabled true }}
        object_store:
          enabled: true
          remote_directory: {{ .Values.global.appConfig.lfs.bucket }}
          direct_upload: true
          background_upload: false
          proxy_download: {{ eq .Values.global.appConfig.lfs.proxy_download true }}
          {{- if .Values.global.minio.enabled }}
          connection:
            provider: AWS
            region: us-east-1
            aws_access_key_id: "<%= File.read('/etc/gitlab/minio/accesskey') %>"
            aws_secret_access_key: "<%= File.read('/etc/gitlab/minio/secretkey') %>"
            host: {{ template "gitlab.minio.hostname" . }}
            endpoint: {{ template "gitlab.minio.endpoint" . }}
            path_style: true
          {{- else if .Values.global.appConfig.lfs.connection }}
          connection: <%= YAML.load_file("/etc/gitlab/objectstorage/lfs").to_json() %>
          {{- end }}
      uploads:
        enabled: {{ eq .Values.global.appConfig.uploads.enabled true }}
        object_store:
          enabled: true
          remote_directory: {{ .Values.global.appConfig.uploads.bucket }}
          direct_upload: true
          background_upload: false
          proxy_download: {{ eq .Values.global.appConfig.uploads.proxy_download true }}
          {{- if .Values.global.minio.enabled }}
          connection:
            provider: AWS
            region: us-east-1
            aws_access_key_id: "<%= File.read('/etc/gitlab/minio/accesskey') %>"
            aws_secret_access_key: "<%= File.read('/etc/gitlab/minio/secretkey') %>"
            host: {{ template "gitlab.minio.hostname" . }}
            endpoint: {{ template "gitlab.minio.endpoint" . }}
            path_style: true
          {{- else if .Values.global.appConfig.uploads.connection }}
          connection: <%= YAML.load_file("/etc/gitlab/objectstorage/uploads").to_json() %>
          {{- end }}
      pages:
        enabled: false
      mattermost:
        enabled: false
      gravatar:
      gitlab_ci:
      ldap:
      {{- if not .Values.ldap.servers }}
        enabled: false
      {{- else }}
        enabled: true
        servers:
{{ toYaml .Values.ldap.servers | indent 10 }}
      {{- end }}
      kerberos:
        enabled: false
      omniauth:
        enabled: {{ .Values.omniauth.enabled }}
        auto_sign_in_with_provider: {{ .Values.omniauth.autoSignInWithProvider | quote }}
        sync_profile_from_provider: {{ .Values.omniauth.syncProfileFromProvider }}
        sync_profile_attributes: {{ .Values.omniauth.syncProfileAttributes }}
        allow_single_sign_on: {{ .Values.omniauth.allowSingleSignOn }}
        block_auto_created_users: {{ .Values.omniauth.blockAutoCreatedUsers }}
        auto_link_ldap_user: {{ .Values.omniauth.autoLinkLdapUser }}
        auto_link_saml_user: {{ .Values.omniauth.autoLinkSamlUser }}
        external_providers: {{ .Values.omniauth.externalProviders }}
        {{- if .Values.omniauth.providers }}
        providers:
        {{-   range $index, $entry := .Values.omniauth.providers }}
          - <%= YAML.load_file("/etc/gitlab/omniauth/{{ $entry.secret }}/provider").to_json() %>
        {{-   end }}
        {{- end }}
      shared:
      gitaly:
        client_path: /home/git/gitaly/bin
        token: "<%= File.read('/etc/gitlab/gitaly/gitaly_token') %>"
      repositories:
        storages: # You must have at least a `default` storage path.
{{ include "gitlab.gitaly.storages" . | indent 10 }}
      backup:
        path: "tmp/backups"   # Relative paths are relative to Rails.root (default: tmp/backups/)
      gitlab_shell:
        path: /home/git/gitlab-shell/
        hooks_path: /home/git/gitlab-shell/hooks/
        secret_file: /etc/gitlab/shell/.gitlab_shell_secret
        upload_pack: true
        receive_pack: true
      workhorse:
        secret_file: /etc/gitlab/gitlab-workhorse/secret
      git:
        bin_path: /usr/bin/git
      webpack:
      monitoring:
        ip_whitelist:
          - 0.0.0.0/0
        sidekiq_exporter:
      extra:
        {{- if .Values.extra }}
{{ toYaml .Values.extra | indent 8 }}
        {{- end }}
      rack_attack:
        git_basic_auth:
          {{- if .Values.rack_attack.git_basic_auth.enabled }}
{{ toYaml .Values.rack_attack.git_basic_auth | indent 10 }}
          {{- end }}
      ## Registry Integration
      registry:
        enabled: {{ .Values.registry.enabled }}
        host: {{ template "gitlab.registry.host" . }}
        {{- if .Values.registry.port }}
        port: {{ .Values.registry.port }}
        {{- end }}
        api_url: {{ default "http" .Values.registry.api.protocol }}://{{ template "gitlab.registry.api.host" . }}:{{ default 5000 .Values.registry.api.port }}
        key: /etc/gitlab/registry/gitlab-registry.key
        issuer: {{ .Values.registry.tokenIssuer }}
  configure: |
      set -e
      config_dir="/init-config"
      secret_dir="/init-secrets-unicorn"

      for secret in redis shell gitaly registry postgres rails-secrets gitlab-workhorse ; do
        mkdir -p "${secret_dir}/${secret}"
        cp -v -r "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
      done
      if [ -e "${config_dir}/minio" ]; then
        mkdir -p "${secret_dir}/minio"
        cp -v -r "${config_dir}/minio/." "${secret_dir}/minio/"
      fi
      if [ -e "${config_dir}/objectstorage" ]; then
        mkdir -p "${secret_dir}/objectstorage"
        cp -v -r "${config_dir}/objectstorage/." "${secret_dir}/objectstorage/"
      fi
      if [ -e "${config_dir}/omniauth" ]; then
        mkdir -p "${secret_dir}/omniauth"
        cp -v -r "${config_dir}/omniauth/." "${secret_dir}/omniauth/"
      fi
      if [ -e "${config_dir}/smtp/smtp-password" ]; then
        mkdir -p "${secret_dir}/smtp"
        cp -v -r "${config_dir}/smtp/smtp-password" "${secret_dir}/smtp/"
      fi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{.Release.Name }}-workhorse-config
  labels:
{{ include "gitlab.standardLabels" . | indent 4 }}
data:
  installation_type: |
    gitlab-helm-chart
  workhorse-config.toml.erb: |
    [redis]
    URL = "tcp://{{ template "gitlab.redis.host" . }}:{{ template "gitlab.redis.port" . }}"
    Password = "<%= File.read("/etc/gitlab/redis/password") %>"
  configure: |
      set -e
      mkdir -p /init-secrets-workhorse/gitlab-workhorse
      cp /init-config/gitlab-workhorse/secret /init-secrets-workhorse/gitlab-workhorse/secret
      mkdir -p /init-secrets-workhorse/redis
      cp /init-config/redis/password /init-secrets-workhorse/redis/
# Leave this here - This line denotes end of block to the parser.
{{- end }}
