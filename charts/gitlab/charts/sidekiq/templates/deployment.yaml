{{- if .Values.enabled -}}
{{- $chart := printf "%s-%s" .Chart.Name .Chart.Version | replace "+" "_" -}}
{{- $name := default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" -}}
{{- $releaseName := .Release.Name -}}
{{- $releaseService := .Release.Service -}}
{{- $fullname := printf "%s-%s" $releaseName $name | trunc 63 | trimSuffix "-" -}}
{{- $image := printf "%s:%s" (coalesce .Values.image.repository (include "image.repository" .)) (coalesce .Values.image.tag (include "gitlab.versionTag" . )) -}}
{{- $concurrency := .Values.concurrency -}}
{{- $timeout := .Values.timeout -}}
{{- $resources := .Values.resources -}}
{{- $nodeSelector := .Values.nodeSelector -}}
{{- $minioEnabled := .Values.global.minio.enabled -}}
{{- $minioSecret := include "gitlab.minio.credentials.secret" . -}}
{{- $redisSecret := include "gitlab.redis.password.secret" . -}}
{{- $redisKey := include "gitlab.redis.password.key" . -}}
{{- $gitalySecret := include "gitlab.gitaly.authToken.secret" . -}}
{{- $gitalyKey := include "gitlab.gitaly.authToken.key" . -}}
{{- $railsSecretName := include "gitlab.rails-secrets.secret" . -}}
{{- $metricsEnabled := .Values.metrics.enabled -}}
{{- $metricsPort := .Values.metrics.port -}}
{{- $metricsAnnotations := .Values.metrics.annotations -}}
{{- $initImage := .Values.init.image }}
{{- $initTag := .Values.init.tag }}
{{- /* The below is an messy attempt to read in, and reflect on the configmap-queues.yaml template. */}}
{{- $queueConfigList := include (print $.Template.BasePath "/configmap-queue.yaml") . | split "\n---" }}
{{- $queues := dict }}
{{- range $k,$v := $queueConfigList }}
{{-   $tmpConfig := $v | fromYaml }}
{{-   $md := $tmpConfig.metadata }}
{{-   $labels :=  $md.labels }}
{{-   $_ := set $queues ( $labels.queue_pod_name | quote ) ( $v | quote ) }}
{{- end }}
{{- $configMapChecksum := include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
{{- range .Values.pods -}}
{{- $queueName := printf "%s-%s" $fullname .name | trunc 63}}
{{- $podNodeSelector := default $nodeSelector .nodeSelector -}}
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ $queueName }}
  namespace: {{ $.Release.Namespace }}
  labels:
{{ include "gitlab.standardLabels" $ | indent 4 }}
    queue-pod-name: {{ .name }}
spec:
  {{- if $.Values.global.operator.enabled }}
  paused: true
  {{- end }}
  selector:
    matchLabels:
      app: {{ $name }}
      release: {{ $releaseName }}
  template:
    metadata:
      labels:
        app: {{ $name }}
        release: {{ $releaseName }}
      annotations:
        checksum/configmap: {{ $configMapChecksum }}
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        checksum/configmap-pod: {{ pluck ( .name | quote ) $queues | last | sha256sum }}
{{- if $metricsEnabled }}
{{ toYaml $metricsAnnotations | indent 8 }}
{{- end }}
    spec:
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      {{- if eq (default $.Values.global.antiAffinity .antiAffinity) "hard" }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app: {{ $name }}
                  release: {{ $releaseName }}
      {{- else if eq (default $.Values.global.antiAffinity .antiAffinity) "soft" }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchLabels:
                  app: {{ $name }}
                  release: {{ $releaseName }}
      {{- end }}
      initContainers:
{{ include "gitlab.certificates.initContainer" $ | indent 8 }}
        - name: configure
          command: ['sh', '/config/configure']
          image: {{ $initImage }}:{{ $initTag }}
          volumeMounts:
          - name: sidekiq-config
            mountPath: /config
            readOnly: true
          - name: init-sidekiq-secrets
            mountPath: /init-secrets
            readOnly: true
          - name: sidekiq-secrets
            mountPath: /sidekiq-secrets
            readOnly: false
          resources:
{{ toYaml $.Values.init.resources | indent 12 }}
        - name: dependencies
          image: "{{ $image }}"
          {{ template "gitlab.imagePullPolicy" $ }}
          args:
            - /scripts/wait-for-deps
          env:
            - name: GITALY_FEATURE_DEFAULT_ON
              value: "1"
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: '/var/opt/gitlab/templates'
            - name: CONFIG_DIRECTORY
              value: '/srv/gitlab/config'
            - name: SIDEKIQ_CONCURRENCY
              value: {{ default $concurrency .concurrency | quote }}
            - name: SIDEKIQ_TIMEOUT
              value: {{ default $timeout .timeout | quote }}
{{- if $.Values.global.operator.enabled }}
            - name: BYPASS_SCHEMA_VERSION
              value: 'true'
{{- end }}
          volumeMounts:
          - name: sidekiq-config
            mountPath: '/var/opt/gitlab/templates'
            readOnly: true
          - name: sidekiq-secrets
            mountPath: '/etc/gitlab'
            readOnly: true
          resources:
{{ toYaml $.Values.init.resources | indent 12 }}
{{- include "pullsecrets" $.Values.image | indent 6}}
      containers:
        - name: {{ $name }}
          image: "{{ $image }}"
          {{ template "gitlab.imagePullPolicy" $ }}
          env:
{{- if $metricsEnabled }}
            - name: prometheus_multiproc_dir
              value: /metrics
{{- end }}
            - name: GITALY_FEATURE_DEFAULT_ON
              value: "1"
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: '/var/opt/gitlab/templates'
            - name: CONFIG_DIRECTORY
              value: '/srv/gitlab/config'
            - name: SIDEKIQ_CONCURRENCY
              value: {{ default $concurrency .concurrency | quote }}
            - name: SIDEKIQ_TIMEOUT
              value: {{ default $timeout .timeout | quote }}
{{- if $metricsEnabled }}
          ports:
          - containerPort: {{ $metricsPort }}
            name: metrics
{{- end }}
          volumeMounts:
{{- if $metricsEnabled }}
          - name: sidekiq-metrics
            mountPath: '/metrics'
{{- end }}
          - name: sidekiq-config
            mountPath: '/var/opt/gitlab/templates'
            readOnly: true
          - name: sidekiq-secrets
            mountPath: '/etc/gitlab'
            readOnly: true
          - name: sidekiq-secrets
            mountPath: /srv/gitlab/config/secrets.yml
            subPath: rails-secrets/secrets.yml
          - name: sidekiq-config
            mountPath: '/srv/gitlab/config/initializers/smtp_settings.rb'
            subPath: smtp_settings.rb
          - name: sidekiq-config
            mountPath: '/srv/gitlab/INSTALLATION_TYPE'
            subPath: installation_type
{{ include "gitlab.certificates.volumeMount" $ | indent 10 }}
          livenessProbe:
            exec:
              command:
                - pgrep
                - -f
                - sidekiq
          readinessProbe:
            exec:
              command:
                - head
                - -c1
                - /dev/random
          lifecycle:
            preStop:
              exec:
                command: ["/bin/bash", "-c", "pkill -f 'sidekiq'"]
          resources:
{{ toYaml ( default $resources .resources ) | indent 12 }}
      volumes:
{{- if $metricsEnabled }}
      - name: sidekiq-metrics
        emptyDir:
          medium: "Memory"
{{- end }}
      - name: sidekiq-config
        projected:
          sources:
            - configMap:
                name: {{ $fullname }}
            - configMap:
                name: {{ $queueName }}
      - name: init-sidekiq-secrets
        projected:
          defaultMode: 0400
          sources:
          - secret:
              name: {{ $railsSecretName }}
              items:
                - key: secrets.yml
                  path: rails-secrets/secrets.yml
          - secret:
              name: {{ $gitalySecret }}
              items:
                - key: {{ $gitalyKey }}
                  path: gitaly/gitaly_token
          - secret:
              name: {{ $redisSecret }}
              items:
                - key: {{ $redisKey }}
                  path: redis/password
          - secret:
              name: {{ template "gitlab.psql.password.secret" $ }}
              items:
                - key: {{ template "gitlab.psql.password.key" $ }}
                  path: postgres/psql-password
          {{- if $minioEnabled }}
          - secret:
              name: {{ $minioSecret }}
              items:
                - key: accesskey
                  path: minio/accesskey
                - key: secretkey
                  path: minio/secretkey
          {{- end }}
          {{- if $.Values.global.appConfig.lfs.connection }}
          - secret:
              name: {{ $.Values.global.appConfig.lfs.connection.secret }}
              items:
                - key: {{ default "connection" $.Values.global.appConfig.lfs.connection.key }}
                  path: objectstorage/lfs
          {{- end }}
          {{- if $.Values.global.appConfig.artifacts.connection }}
          - secret:
              name: {{ $.Values.global.appConfig.artifacts.connection.secret }}
              items:
                - key: {{ default "connection" $.Values.global.appConfig.artifacts.connection.key }}
                  path: objectstorage/artifacts
          {{- end }}
          {{- if $.Values.global.appConfig.uploads.connection }}
          - secret:
              name: {{ $.Values.global.appConfig.uploads.connection.secret }}
              items:
                - key: {{ default "connection" $.Values.global.appConfig.uploads.connection.key }}
                  path: objectstorage/uploads
          {{- end }}
          {{- if and $.Values.global.smtp.enabled $.Values.global.smtp.authentication }}
          - secret:
              name: {{ $.Values.global.smtp.password.secret | required "Missing required secret containing the SMTP password. Make sure to set `global.smtp.password.secret`" }}
              items:
                - key: {{ $.Values.global.smtp.password.key }}
                  path: smtp/smtp-password
          {{- end }}
      - name: sidekiq-secrets
        emptyDir:
          medium: "Memory"
{{ include "gitlab.certificates.volumes" $ | indent 6 }}
    {{- if $podNodeSelector }}
      nodeSelector:
{{ toYaml $podNodeSelector | indent 8 }}
    {{- end }}
---
{{-   end -}}
{{- end }}
